import torch
import torch.nn as nn
import torchvision.models as models
from torchvision import datasets, transforms
from torch.utils.data import DataLoader

# Vérifier si un GPU est disponible
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Entraînement sur : {DEVICE}")

# Transformation des images
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# Chargement du dataset
DATA_DIR = "./RSI-CB128"
dataset = datasets.ImageFolder(root=DATA_DIR, transform=transform)

dataloader = DataLoader(dataset, batch_size=32, shuffle=True)

# Chargement du modèle ResNet18 pré-entraîné
model = models.resnet18(pretrained=True)

# Modification de la dernière couche pour correspondre au nombre de classes
num_ftrs = model.fc.in_features
model.fc = nn.Linear(num_ftrs, len(dataset.classes))

# Envoi sur le bon device
model = model.to(DEVICE)

# Définition de la fonction de perte et de l'optimiseur
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Boucle d'entraînement
epochs = 10  # Nombre d'époques
for epoch in range(epochs):
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0
    
    for images, labels in dataloader:
        images, labels = images.to(DEVICE), labels.to(DEVICE)
        
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        
        running_loss += loss.item()
        _, predicted = outputs.max(1)
        total += labels.size(0)
        correct += predicted.eq(labels).sum().item()
    
    print(f"Epoch {epoch+1}/{epochs}, Loss: {running_loss/len(dataloader):.4f}, Accuracy: {100 * correct / total:.2f}%")

# Affichage de l'architecture modifiée
print(model)
